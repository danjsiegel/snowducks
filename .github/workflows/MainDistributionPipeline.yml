#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: SnowDucks CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-test:
    name: Setup and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: snowducks_metadata
          POSTGRES_USER: snowducks_user
          POSTGRES_PASSWORD: snowducks_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git

    - name: Setup environment
      run: |
        # Create .env file for testing
        cp env.example .env
        # Set test environment variables
        echo "SNOWFLAKE_USER=test_user" >> .env
        echo "SNOWFLAKE_PASSWORD=test_password" >> .env
        echo "SNOWFLAKE_ACCOUNT=test_account" >> .env
        echo "SNOWFLAKE_DATABASE=test_database" >> .env
        echo "SNOWFLAKE_WAREHOUSE=test_warehouse" >> .env
        echo "SNOWFLAKE_ROLE=test_role" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_DATABASE=snowducks_metadata" >> .env
        echo "POSTGRES_USER=snowducks_user" >> .env
        echo "POSTGRES_PASSWORD=snowducks_password" >> .env

    - name: Complete setup
      run: make init

    - name: Run all tests
      run: make test

    - name: Test PostgreSQL integration
      run: |
        # Test PostgreSQL connection
        python3 utils/test_postgresql_setup.py

    - name: Build extension
      run: make build

    - name: Test extension loading
      run: |
        # Test that extension can be loaded
        ./build/release/duckdb -c "LOAD 'build/release/extension/snowducks/snowducks.duckdb_extension'; SELECT snowducks_info('extension') as status;"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/cli/requirements-dev.txt

    - name: Check Python formatting
      run: |
        black --check src/cli/
        black --check test/python/

    - name: Check Python linting
      run: |
        flake8 src/cli/ --max-line-length=101 --extend-ignore=E203,W503
        flake8 test/python/ --max-line-length=101 --extend-ignore=E203,W503

    - name: Check Python types
      run: |
        mypy src/cli/

  build-extension:
    name: Build Extension
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git

    - name: Build extension
      run: make build

    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: snowducks-extension
        path: build/release/extension/snowducks/snowducks.duckdb_extension
